const Task = require("../models/Task");

// GET /api/tasks ‚Äî –ª–∏—à–µ –∑–∞–¥–∞—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.getAllTasks = async (req, res) => {
  try {
    const tasks = await Task.findAll({ where: { userId: req.user.id } });
    res.json(tasks);
  } catch (error) {
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–¥–∞—á—ñ" });
  }
};

// GET /api/tasks/:id ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∑–∞–¥–∞—á–∞, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
exports.getTaskById = async (req, res) => {
  try {
    const task = await Task.findOne({
      where: { id: req.params.id, userId: req.user.id },
    });
    if (!task) return res.status(404).json({ error: "–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(task);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ" });
  }
};

// POST /api/tasks ‚Äî —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –∑ userId
exports.createTask = async (req, res) => {
  try {
    const task = await Task.create({ ...req.body, userId: req.user.id });
    res.status(201).json(task);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ:", error.message);
    console.error("üìÑ –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:", error);
    res.status(400).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};


// PUT /api/tasks/:id ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–∏—à–µ —Å–≤–æ—ó—Ö –∑–∞–¥–∞—á
exports.updateTask = async (req, res) => {
  try {
    const task = await Task.findOne({
      where: { id: req.params.id, userId: req.user.id },
    });
    if (!task) return res.status(404).json({ error: "–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    await task.update(req.body);
    res.json(task);
  } catch (error) {
    res.status(400).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};

// DELETE /api/tasks/:id ‚Äî –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª–∏—à–µ —Å–≤–æ—ó—Ö –∑–∞–¥–∞—á
exports.deleteTask = async (req, res) => {
  try {
    const deleted = await Task.destroy({
      where: { id: req.params.id, userId: req.user.id },
    });
    if (!deleted) {
      return res.status(404).json({ error: "–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json({ message: "–ó–∞–¥–∞—á—É –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (error) {
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};
