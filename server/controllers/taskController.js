const Task = require("../models/Task");
const User = require("../models/User");

// GET /api/tasks ‚Äî –ª–∏—à–µ –∑–∞–¥–∞—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.getAllTasks = async (req, res) => {
  try {
    const filters = { userId: req.user.id };
    if (req.query.category) {
      filters.category = req.query.category;
    }

    const tasks = await Task.findAll({ where: filters });
    res.json(tasks);
  } catch (error) {
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–¥–∞—á—ñ" });
  }
};


// GET /api/tasks/:id ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∑–∞–¥–∞—á–∞, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
exports.getTaskById = async (req, res) => {
  try {
    const task = await Task.findOne({
      where: { id: req.params.id, userId: req.user.id },
    });
    if (!task) return res.status(404).json({ error: "–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(task);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ" });
  }
};

// POST /api/tasks ‚Äî —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –∑ userId
exports.createTask = async (req, res) => {
  try {
    const task = await Task.create({ ...req.body, userId: req.user.id });
    res.status(201).json(task);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ:", error.message);
    console.error("üìÑ –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:", error);
    res.status(400).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};

// PUT /api/tasks/:id ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–∏—à–µ —Å–≤–æ—ó—Ö –∑–∞–¥–∞—á
exports.updateTask = async (req, res) => {
  try {
    const task = await Task.findOne({
      where: { id: req.params.id, userId: req.user.id },
    });
    if (!task) return res.status(404).json({ error: "–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    await task.update(req.body);
    res.json(task);
  } catch (error) {
    res.status(400).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};

// DELETE /api/tasks/:id ‚Äî –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª–∏—à–µ —Å–≤–æ—ó—Ö –∑–∞–¥–∞—á
exports.deleteTask = async (req, res) => {
  try {
    const deleted = await Task.destroy({
      where: { id: req.params.id, userId: req.user.id },
    });
    if (!deleted) {
      return res.status(404).json({ error: "–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json({ message: "–ó–∞–¥–∞—á—É –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (error) {
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};

const axios = require("axios");

exports.getTaskSuggestions = async (req, res) => {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–¥–∞—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const tasks = await Task.findAll({
      where: { userId: req.user.id },
    });

    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await User.findByPk(req.user.id, {
      attributes: ["name", "gender", "occupation"],
    });

    const systemPrompt = `
–¢–∏ ‚Äî —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–¥–∞—á–∞–º–∏. –¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –æ–±—Ä–∞—Ç–∏, –∑ —è–∫–∏—Ö –∑–∞–¥–∞—á –ø–æ—á–∞—Ç–∏, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏:
- –¥–µ–¥–ª–∞–π–Ω–∏
- —Å—Ç–∞—Ç—É—Å–∏
- –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏
- —Å—Ç–∞—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
- –π–æ–≥–æ —Ä—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ

–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
- –Ü–º‚Äô—è: ${user.name || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –°—Ç–∞—Ç—å: ${user.gender || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –†—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ: ${user.occupation || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}

–ù–∞ –æ—Å–Ω–æ–≤—ñ –≤—Å—å–æ–≥–æ —Ü—å–æ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–∞–¥–∞—á—ñ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é:
1. –í—ñ–¥—Å–æ—Ä—Ç—É–π –∑–∞–¥–∞—á—ñ –≤—ñ–¥ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–æ—ó –¥–æ –º–µ–Ω—à –≤–∞–∂–ª–∏–≤–æ—ó
2. –í–∏–∑–Ω–∞—á, –∑ —á–æ–≥–æ –≤–∞—Ä—Ç–æ –ø–æ—á–∞—Ç–∏ —ñ —á–æ–º—É
3. –ó–∞ –ø–æ—Ç—Ä–µ–±–∏, –∑–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É –Ω–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–¥–∞—á—ñ –∞–±–æ –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å

üîÅ –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
{
  "sortedTasks": [...],
  "suggestion": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é (5‚Äì7 —Ä–µ—á–µ–Ω—å)"
}
    `.trim();

    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: systemPrompt,
          },
          {
            role: "user",
            content: JSON.stringify(tasks),
          },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.AI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const content = response.data.choices[0].message.content;

    const parsed = JSON.parse(content);

    res.json(parsed);
  } catch (err) {
    console.error("‚ùå AI error:", err?.response?.data || err.message);
    res.status(500).json({ error: "AI –Ω–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—ñ" });
  }
};
