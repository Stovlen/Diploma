const Task = require("../models/Task");

// GET /api/tasks ‚Äî –ª–∏—à–µ –∑–∞–¥–∞—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.getAllTasks = async (req, res) => {
  try {
    const tasks = await Task.findAll({ where: { userId: req.user.id } });
    res.json(tasks);
  } catch (error) {
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–¥–∞—á—ñ" });
  }
};

// GET /api/tasks/:id ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∑–∞–¥–∞—á–∞, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
exports.getTaskById = async (req, res) => {
  try {
    const task = await Task.findOne({
      where: { id: req.params.id, userId: req.user.id },
    });
    if (!task) return res.status(404).json({ error: "–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(task);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ" });
  }
};

// POST /api/tasks ‚Äî —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –∑ userId
exports.createTask = async (req, res) => {
  try {
    const task = await Task.create({ ...req.body, userId: req.user.id });
    res.status(201).json(task);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ:", error.message);
    console.error("üìÑ –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:", error);
    res.status(400).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};


// PUT /api/tasks/:id ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–∏—à–µ —Å–≤–æ—ó—Ö –∑–∞–¥–∞—á
exports.updateTask = async (req, res) => {
  try {
    const task = await Task.findOne({
      where: { id: req.params.id, userId: req.user.id },
    });
    if (!task) return res.status(404).json({ error: "–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    await task.update(req.body);
    res.json(task);
  } catch (error) {
    res.status(400).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};

// DELETE /api/tasks/:id ‚Äî –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª–∏—à–µ —Å–≤–æ—ó—Ö –∑–∞–¥–∞—á
exports.deleteTask = async (req, res) => {
  try {
    const deleted = await Task.destroy({
      where: { id: req.params.id, userId: req.user.id },
    });
    if (!deleted) {
      return res.status(404).json({ error: "–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json({ message: "–ó–∞–¥–∞—á—É –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (error) {
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};

const axios = require("axios");

exports.getTaskSuggestions = async (req, res) => {
  try {
    const tasks = await Task.findAll({
      where: { userId: req.user.id },
    });

    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo", // –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ "gpt-3.5-turbo"
        messages: [
          {
            role: "system",
            content: `
–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–¥–∞–≤ —Ç–æ–±—ñ —Å–ø–∏—Å–æ–∫ —Å–≤–æ—ó—Ö –∑–∞–¥–∞—á (—ñ–∑ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏, —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Ç–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏).

–¢–≤–æ—è –º–µ—Ç–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ.
2. –ü–æ—è—Å–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –∑ —á–æ–≥–æ –≤–∞—Ä—Ç–æ –ø–æ—á–∞—Ç–∏ —ñ —á–æ–º—É.
3. –ó–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É –Ω–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∞–±–æ –∑–∞–±—É—Ç—ñ –∑–∞–¥–∞—á—ñ.
4. –ó—Ä–æ–±–∏—Ç–∏ –≤–∏—Å–Ω–æ–≤–∫–∏ –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –±–∞–≥–∞—Ç–æ –∑–∞–¥–∞—á –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–±–æ –∑ –Ω–∏–∑—å–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º).

üîÅ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–µ—Ä–Ω–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –∑ –ø–æ–ª—è–º–∏:
- "sortedTasks": –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤ –∑–∞–¥–∞—á
- "suggestion": –¥–µ—Ç–∞–ª—å–Ω–∞ –ø–æ—Ä–∞–¥–∞ (5‚Äì7 —Ä–µ—á–µ–Ω—å), —É –¥—Ä—É–∂–Ω—å–æ–º—É —Ç–æ–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
            `.trim(),
          },
          {
            role: "user",
            content: JSON.stringify(tasks),
          },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.AI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const content = response.data.choices[0].message.content;

    const parsed = JSON.parse(content); // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT

    res.json(parsed);
  } catch (err) {
    console.error("‚ùå AI error:", err?.response?.data || err.message);
    res.status(500).json({ error: "AI –Ω–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—ñ" });
  }
};

