const axios = require("axios");
const User = require("../models/User");
const Task = require("../models/Task");

exports.getDailyTip = async (req, res) => {
  try {
    const user = await User.findByPk(req.user.id, {
      attributes: ["name", "gender", "occupation"],
    });

    const systemPrompt = `
–¢–∏ ‚Äî –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π —â–æ–¥–Ω—è –º–æ—Ç–∏–≤—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ.

–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
- –Ü–º‚Äô—è: ${user.name || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –°—Ç–∞—Ç—å: ${user.gender || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –†—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ: ${user.occupation || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}

üìå –ó–∞–≤–¥–∞–Ω–Ω—è: –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É –ø–æ—Ä–∞–¥—É (1-2 —Ä–µ—á–µ–Ω–Ω—è), —è–∫ –Ω–∞–π–∫—Ä–∞—â–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
- ‚Äú–û–ª–µ–∫—Å–∞–Ω–¥—Ä–µ, –ø–æ—á–Ω–∏ –¥–µ–Ω—å —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –∑–∞–¥–∞—á. –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä—É–π—Å—è –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—ñ.‚Äù
- ‚Äú–ü–∞–Ω—ñ –û–∫—Å–∞–Ω–æ, 30 —Ö–≤–∏–ª–∏–Ω —Ç–∏—à—ñ –∑ –∫–∞–≤–æ—é –¥–æ–ø–æ–º–æ–∂—É—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏—Å—å –Ω–∞ —Ä–æ–±–æ—á–∏–π —Ä–∏—Ç–º.‚Äù

üì¶ –§–æ—Ä–º–∞—Ç:
{ "tip": "–¢–≤–æ—è –ø–æ—Ä–∞–¥–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é" }
    `.trim();

    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: systemPrompt,
          },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.AI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const content = response.data.choices[0].message.content;
    const parsed = JSON.parse(content);

    res.json(parsed);
  } catch (err) {
    console.error("‚ùå AI Tip Error:", err?.response?.data || err.message);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥—É –≤—ñ–¥ –®–Ü" });
  }
};

exports.generateTaskFromPrompt = async (req, res) => {
  try {
    const { prompt } = req.body;
    if (!prompt) {
      return res.status(400).json({ error: "–û–ø–∏—Å –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π" });
    }

    const user = await User.findByPk(req.user.id, {
      attributes: ["name", "gender", "occupation"],
    });

    const systemPrompt = `
  –¢–∏ ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –æ–ø–∏—Å –±–∞–∂–∞–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—å –¥–æ —ñ—Å–ø–∏—Ç—É", "–ø—Ä–∏–±—Ä–∞—Ç–∏ –≤–¥–æ–º–∞").
  
  üéØ –ó–∞–≤–¥–∞–Ω–Ω—è:
  1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –æ–ø–∏—Å.
  2. –°—Ñ–æ—Ä–º—É–π –∑–∞–¥–∞—á—É —É –≤–∏–≥–ª—è–¥—ñ:
     - title: –∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞
     - description: —É—Ç–æ—á–Ω–µ–Ω–Ω—è, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏
     - deadline: –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (ISO-—Ñ–æ—Ä–º–∞—Ç, –º–∞–∫—Å–∏–º—É–º —á–µ—Ä–µ–∑ 7 –¥–Ω—ñ–≤)
     - priority: low / medium / high (–æ—Ü—ñ–Ω–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ –∑–º—ñ—Å—Ç—É)
  
  üì¶ –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: –ª–∏—à–µ JSON
  {
    "title": "...",
    "description": "...",
    "deadline": "2025-05-25T00:00:00.000Z",
    "priority": "medium"
  }
  
  üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
  - –Ü–º‚Äô—è: ${user.name || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
  - –°—Ç–∞—Ç—å: ${user.gender || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
  - –†—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ: ${user.occupation || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
      `.trim();

    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: prompt },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.AI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const content = response.data.choices[0].message.content;

    const parsed = JSON.parse(content);

    res.json(parsed);
  } catch (err) {
    console.error(
      "‚ùå AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–¥–∞—á—ñ –ø–æ–º–∏–ª–∫–∞:",
      err?.response?.data || err.message
    );
    res.status(500).json({ error: "AI –Ω–µ –∑–º—ñ–≥ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};