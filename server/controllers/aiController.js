const axios = require("axios");
const User = require("../models/User");
const Task = require("../models/Task");

exports.getDailyTip = async (req, res) => {
  try {
    const user = await User.findByPk(req.user.id, {
      attributes: ["name", "gender", "occupation"],
    });

    const systemPrompt = `
–¢–∏ ‚Äî –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π —â–æ–¥–Ω—è –º–æ—Ç–∏–≤—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ.

–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
- –Ü–º‚Äô—è: ${user.name || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –°—Ç–∞—Ç—å: ${user.gender || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –†—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ: ${user.occupation || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}

üìå –ó–∞–≤–¥–∞–Ω–Ω—è: –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É –ø–æ—Ä–∞–¥—É (1-2 —Ä–µ—á–µ–Ω–Ω—è), —è–∫ –Ω–∞–π–∫—Ä–∞—â–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
- ‚Äú–û–ª–µ–∫—Å–∞–Ω–¥—Ä–µ, –ø–æ—á–Ω–∏ –¥–µ–Ω—å —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –∑–∞–¥–∞—á. –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä—É–π—Å—è –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—ñ.‚Äù
- ‚Äú–ü–∞–Ω—ñ –û–∫—Å–∞–Ω–æ, 30 —Ö–≤–∏–ª–∏–Ω —Ç–∏—à—ñ –∑ –∫–∞–≤–æ—é –¥–æ–ø–æ–º–æ–∂—É—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏—Å—å –Ω–∞ —Ä–æ–±–æ—á–∏–π —Ä–∏—Ç–º.‚Äù

üì¶ –§–æ—Ä–º–∞—Ç:
{ "tip": "–¢–≤–æ—è –ø–æ—Ä–∞–¥–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é" }
    `.trim();

    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: systemPrompt,
          },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.AI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const content = response.data.choices[0].message.content;
    const parsed = JSON.parse(content);

    res.json(parsed);
  } catch (err) {
    console.error("‚ùå AI Tip Error:", err?.response?.data || err.message);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥—É –≤—ñ–¥ –®–Ü" });
  }
};

exports.generateTaskFromPrompt = async (req, res) => {
  try {
    const { prompt } = req.body;
    if (!prompt) {
      return res.status(400).json({ error: "–û–ø–∏—Å –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π" });
    }

    const user = await User.findByPk(req.user.id, {
      attributes: ["name", "gender", "occupation"],
    });

    const systemPrompt = `
–¢–∏ ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –æ–ø–∏—Å –±–∞–∂–∞–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—å –¥–æ —ñ—Å–ø–∏—Ç—É", "–ø—Ä–∏–±—Ä–∞—Ç–∏ –≤–¥–æ–º–∞").

üéØ –ó–∞–≤–¥–∞–Ω–Ω—è:
1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –æ–ø–∏—Å.
2. –°—Ñ–æ—Ä–º—É–π –∑–∞–¥–∞—á—É —É –≤–∏–≥–ª—è–¥—ñ:
   - title: –∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞
   - description: —É—Ç–æ—á–Ω–µ–Ω–Ω—è, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏
   - priority: low / medium / high (–æ—Ü—ñ–Ω–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ –∑–º—ñ—Å—Ç—É)

‚ùó –ù–µ –≤–∫–∞–∑—É–π –¥–µ–¥–ª–∞–π–Ω. –ô–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.

üì¶ –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: –ª–∏—à–µ JSON
{
  "title": "...",
  "description": "...",
  "priority": "medium"
}

üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
- –Ü–º‚Äô—è: ${user.name || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –°—Ç–∞—Ç—å: ${user.gender || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –†—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ: ${user.occupation || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
    `.trim();

    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: prompt },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.AI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const parsed = JSON.parse(response.data.choices[0].message.content);

    // –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO
    const today = new Date().toISOString().split("T")[0];

    const createdTask = await Task.create({
      title: parsed.title,
      description: parsed.description,
      priority: parsed.priority,
      deadline: today,
      status: "not_started",
      userId: req.user.id,
    });

    res.status(201).json(createdTask);
  } catch (err) {
    console.error(
      "‚ùå AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–¥–∞—á—ñ –ø–æ–º–∏–ª–∫–∞:",
      err?.response?.data || err.message
    );
    res.status(500).json({ error: "AI –Ω–µ –∑–º—ñ–≥ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—É" });
  }
};

exports.analyzeHabits = async (req, res) => {
  try {
    const userId = req.user.id;

    const user = await User.findByPk(userId, {
      attributes: ["name", "gender", "occupation"],
    });

    const allTasks = await Task.findAll({ where: { userId } });

    const now = new Date();
    const weekAgo = new Date();
    weekAgo.setDate(now.getDate() - 7);

    const completedTasks = allTasks.filter((t) => t.status === "done");
    const overdueTasks = allTasks.filter(
      (t) => t.deadline && new Date(t.deadline) < now && t.status !== "done"
    );

    const recentCompleted = completedTasks.filter(
      (t) => new Date(t.updatedAt) >= weekAgo
    );

    const priorityCount = {
      low: completedTasks.filter((t) => t.priority === "low").length,
      medium: completedTasks.filter((t) => t.priority === "medium").length,
      high: completedTasks.filter((t) => t.priority === "high").length,
    };

    const categories = {};
    completedTasks.forEach((task) => {
      if (task.category) {
        categories[task.category] = (categories[task.category] || 0) + 1;
      }
    });

    const systemPrompt = `
–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –û—Ü—ñ–Ω–∏ –∑–≤–∏—á–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:

1. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á: ${completedTasks.length}
2. –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–¥–∞—á—ñ: ${overdueTasks.length}
3. –ó–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å: ${recentCompleted.length}
4. –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞—Ö:
   - Low: ${priorityCount.low}
   - Medium: ${priorityCount.medium}
   - High: ${priorityCount.high}
5. –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${
      Object.entries(categories)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 3)
        .map(([cat, count]) => `${cat} (${count})`)
        .join(", ") || "–Ω–µ–º–∞—î"
    }

üß† –ó–∞–¥–∞—á–∞:
–ó—Ä–æ–±–∏ –∞–Ω–∞–ª—ñ–∑ —É –≤–∏–≥–ª—è–¥—ñ 2-3 –∞–±–∑–∞—Ü—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –î–∞–π –ø–æ—Ä–∞–¥–∏, —è–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å. –£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä—ñ–≤.

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:
- –Ü–º‚Äô—è: ${user.name || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –°—Ç–∞—Ç—å: ${user.gender || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
- –î—ñ—è–ª—å–Ω—ñ—Å—Ç—å: ${user.occupation || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}

üì¶ –§–æ—Ä–º–∞—Ç:
{ "insight": "..." }
`.trim();

    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: [{ role: "system", content: systemPrompt }],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.AI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const parsed = JSON.parse(response.data.choices[0].message.content);
    res.json(parsed);
  } catch (err) {
    console.error(
      "‚ùå Habit Analysis Error:",
      err?.response?.data || err.message
    );
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –∑–≤–∏—á–æ–∫" });
  }
};